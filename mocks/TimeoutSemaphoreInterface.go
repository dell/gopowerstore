// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/dell/gopowerstore/api"

	mock "github.com/stretchr/testify/mock"
)

// TimeoutSemaphoreInterface is an autogenerated mock type for the TimeoutSemaphoreInterface type
type TimeoutSemaphoreInterface struct {
	mock.Mock
}

// Acquire provides a mock function with given fields: ctx
func (_m *TimeoutSemaphoreInterface) Acquire(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields: ctx
func (_m *TimeoutSemaphoreInterface) Release(ctx context.Context) {
	_m.Called(ctx)
}

// SetLogger provides a mock function with given fields: logger
func (_m *TimeoutSemaphoreInterface) SetLogger(logger api.Logger) api.TimeoutSemaphoreInterface {
	ret := _m.Called(logger)

	if len(ret) == 0 {
		panic("no return value specified for SetLogger")
	}

	var r0 api.TimeoutSemaphoreInterface
	if rf, ok := ret.Get(0).(func(api.Logger) api.TimeoutSemaphoreInterface); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.TimeoutSemaphoreInterface)
		}
	}

	return r0
}

// NewTimeoutSemaphoreInterface creates a new instance of TimeoutSemaphoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimeoutSemaphoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimeoutSemaphoreInterface {
	mock := &TimeoutSemaphoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
