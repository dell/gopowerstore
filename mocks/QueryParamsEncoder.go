// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	api "github.com/dell/gopowerstore/api"
	mock "github.com/stretchr/testify/mock"
)

// QueryParamsEncoder is an autogenerated mock type for the QueryParamsEncoder type
type QueryParamsEncoder struct {
	mock.Mock
}

// Async provides a mock function with given fields: _a0
func (_m *QueryParamsEncoder) Async(_a0 bool) api.QueryParamsEncoder {
	ret := _m.Called(_a0)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(bool) api.QueryParamsEncoder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}

// Encode provides a mock function with given fields:
func (_m *QueryParamsEncoder) Encode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Limit provides a mock function with given fields: _a0
func (_m *QueryParamsEncoder) Limit(_a0 int) api.QueryParamsEncoder {
	ret := _m.Called(_a0)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(int) api.QueryParamsEncoder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}

// Offset provides a mock function with given fields: _a0
func (_m *QueryParamsEncoder) Offset(_a0 int) api.QueryParamsEncoder {
	ret := _m.Called(_a0)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(int) api.QueryParamsEncoder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}

// Order provides a mock function with given fields: _a0
func (_m *QueryParamsEncoder) Order(_a0 ...string) api.QueryParamsEncoder {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(...string) api.QueryParamsEncoder); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}

// RawArg provides a mock function with given fields: _a0, _a1
func (_m *QueryParamsEncoder) RawArg(_a0 string, _a1 string) api.QueryParamsEncoder {
	ret := _m.Called(_a0, _a1)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(string, string) api.QueryParamsEncoder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}

// Select provides a mock function with given fields: _a0
func (_m *QueryParamsEncoder) Select(_a0 ...string) api.QueryParamsEncoder {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 api.QueryParamsEncoder
	if rf, ok := ret.Get(0).(func(...string) api.QueryParamsEncoder); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.QueryParamsEncoder)
		}
	}

	return r0
}
