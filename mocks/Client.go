// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/dell/gopowerstore/api"

	gopowerstore "github.com/dell/gopowerstore"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// APIClient provides a mock function with given fields:
func (_m *Client) APIClient() api.ApiClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIClient")
	}

	var r0 api.ApiClient
	if rf, ok := ret.Get(0).(func() api.ApiClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ApiClient)
		}
	}

	return r0
}

// AddMembersToVolumeGroup provides a mock function with given fields: ctx, params, id
func (_m *Client) AddMembersToVolumeGroup(ctx context.Context, params *gopowerstore.VolumeGroupMembers, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, params, id)

	if len(ret) == 0 {
		panic("no return value specified for AddMembersToVolumeGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, params, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, params, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) error); ok {
		r1 = rf(ctx, params, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolumeToHost provides a mock function with given fields: ctx, hostID, attachParams
func (_m *Client) AttachVolumeToHost(ctx context.Context, hostID string, attachParams *gopowerstore.HostVolumeAttach) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, hostID, attachParams)

	if len(ret) == 0 {
		panic("no return value specified for AttachVolumeToHost")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeAttach) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, hostID, attachParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeAttach) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, hostID, attachParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.HostVolumeAttach) error); ok {
		r1 = rf(ctx, hostID, attachParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolumeToHostGroup provides a mock function with given fields: ctx, hostGroupID, attachParams
func (_m *Client) AttachVolumeToHostGroup(ctx context.Context, hostGroupID string, attachParams *gopowerstore.HostVolumeAttach) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, hostGroupID, attachParams)

	if len(ret) == 0 {
		panic("no return value specified for AttachVolumeToHostGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeAttach) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, hostGroupID, attachParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeAttach) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, hostGroupID, attachParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.HostVolumeAttach) error); ok {
		r1 = rf(ctx, hostGroupID, attachParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloneFS provides a mock function with given fields: ctx, createParams, fsID
func (_m *Client) CloneFS(ctx context.Context, createParams *gopowerstore.FsClone, fsID string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams, fsID)

	if len(ret) == 0 {
		panic("no return value specified for CloneFS")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsClone, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams, fsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsClone, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams, fsID)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.FsClone, string) error); ok {
		r1 = rf(ctx, createParams, fsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloneVolume provides a mock function with given fields: ctx, createParams, volID
func (_m *Client) CloneVolume(ctx context.Context, createParams *gopowerstore.VolumeClone, volID string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams, volID)

	if len(ret) == 0 {
		panic("no return value specified for CloneVolume")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeClone, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeClone, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams, volID)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeClone, string) error); ok {
		r1 = rf(ctx, createParams, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComputeDifferences provides a mock function with given fields: ctx, snapdiffParams, volID
func (_m *Client) ComputeDifferences(ctx context.Context, snapdiffParams *gopowerstore.VolumeComputeDifferences, volID string) (gopowerstore.VolumeComputeDifferencesResponse, error) {
	ret := _m.Called(ctx, snapdiffParams, volID)

	if len(ret) == 0 {
		panic("no return value specified for ComputeDifferences")
	}

	var r0 gopowerstore.VolumeComputeDifferencesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeComputeDifferences, string) (gopowerstore.VolumeComputeDifferencesResponse, error)); ok {
		return rf(ctx, snapdiffParams, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeComputeDifferences, string) gopowerstore.VolumeComputeDifferencesResponse); ok {
		r0 = rf(ctx, snapdiffParams, volID)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeComputeDifferencesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeComputeDifferences, string) error); ok {
		r1 = rf(ctx, snapdiffParams, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMetricsByAppliance provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) CopyMetricsByAppliance(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByApplianceResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for CopyMetricsByAppliance")
	}

	var r0 []gopowerstore.CopyMetricsByApplianceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByApplianceResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.CopyMetricsByApplianceResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.CopyMetricsByApplianceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMetricsByCluster provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) CopyMetricsByCluster(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByClusterResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for CopyMetricsByCluster")
	}

	var r0 []gopowerstore.CopyMetricsByClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByClusterResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.CopyMetricsByClusterResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.CopyMetricsByClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMetricsByRemoteSystem provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) CopyMetricsByRemoteSystem(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByRemoteSystemResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for CopyMetricsByRemoteSystem")
	}

	var r0 []gopowerstore.CopyMetricsByRemoteSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByRemoteSystemResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.CopyMetricsByRemoteSystemResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.CopyMetricsByRemoteSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMetricsByVolume provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) CopyMetricsByVolume(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByVolumeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for CopyMetricsByVolume")
	}

	var r0 []gopowerstore.CopyMetricsByVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByVolumeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.CopyMetricsByVolumeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.CopyMetricsByVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMetricsByVolumeGroup provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) CopyMetricsByVolumeGroup(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByVolumeGroupResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for CopyMetricsByVolumeGroup")
	}

	var r0 []gopowerstore.CopyMetricsByVolumeGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.CopyMetricsByVolumeGroupResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.CopyMetricsByVolumeGroupResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.CopyMetricsByVolumeGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFS provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateFS(ctx context.Context, createParams *gopowerstore.FsCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateFS")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.FsCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFsFromSnapshot provides a mock function with given fields: ctx, createParams, snapID
func (_m *Client) CreateFsFromSnapshot(ctx context.Context, createParams *gopowerstore.FsClone, snapID string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams, snapID)

	if len(ret) == 0 {
		panic("no return value specified for CreateFsFromSnapshot")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsClone, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams, snapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FsClone, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams, snapID)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.FsClone, string) error); ok {
		r1 = rf(ctx, createParams, snapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFsSnapshot provides a mock function with given fields: ctx, createSnapParams, id
func (_m *Client) CreateFsSnapshot(ctx context.Context, createSnapParams *gopowerstore.SnapshotFSCreate, id string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createSnapParams, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateFsSnapshot")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotFSCreate, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createSnapParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotFSCreate, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createSnapParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.SnapshotFSCreate, string) error); ok {
		r1 = rf(ctx, createSnapParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHost provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateHost(ctx context.Context, createParams *gopowerstore.HostCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateHost")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.HostCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostGroup provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateHostGroup(ctx context.Context, createParams *gopowerstore.HostGroupCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateHostGroup")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostGroupCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostGroupCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.HostGroupCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNAS provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateNAS(ctx context.Context, createParams *gopowerstore.NASCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateNAS")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NASCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NASCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.NASCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNFSExport provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateNFSExport(ctx context.Context, createParams *gopowerstore.NFSExportCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateNFSExport")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSExportCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSExportCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.NFSExportCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNFSServer provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateNFSServer(ctx context.Context, createParams *gopowerstore.NFSServerCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateNFSServer")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSServerCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSServerCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.NFSServerCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtectionPolicy provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateProtectionPolicy(ctx context.Context, createParams *gopowerstore.ProtectionPolicyCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateProtectionPolicy")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ProtectionPolicyCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ProtectionPolicyCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.ProtectionPolicyCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationRule provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateReplicationRule(ctx context.Context, createParams *gopowerstore.ReplicationRuleCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationRule")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ReplicationRuleCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ReplicationRuleCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.ReplicationRuleCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, createSnapParams, id
func (_m *Client) CreateSnapshot(ctx context.Context, createSnapParams *gopowerstore.SnapshotCreate, id string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createSnapParams, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotCreate, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createSnapParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotCreate, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createSnapParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.SnapshotCreate, string) error); ok {
		r1 = rf(ctx, createSnapParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotRule provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateSnapshotRule(ctx context.Context, createParams *gopowerstore.SnapshotRuleCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshotRule")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.SnapshotRuleCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorageContainer provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateStorageContainer(ctx context.Context, createParams *gopowerstore.StorageContainer) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageContainer")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.StorageContainer) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.StorageContainer) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.StorageContainer) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateVolume(ctx context.Context, createParams *gopowerstore.VolumeCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolume")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeFromSnapshot provides a mock function with given fields: ctx, createParams, snapID
func (_m *Client) CreateVolumeFromSnapshot(ctx context.Context, createParams *gopowerstore.VolumeClone, snapID string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams, snapID)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolumeFromSnapshot")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeClone, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams, snapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeClone, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams, snapID)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeClone, string) error); ok {
		r1 = rf(ctx, createParams, snapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeGroup provides a mock function with given fields: ctx, createParams
func (_m *Client) CreateVolumeGroup(ctx context.Context, createParams *gopowerstore.VolumeGroupCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolumeGroup")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeGroupCreate) error); ok {
		r1 = rf(ctx, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeGroupSnapshot provides a mock function with given fields: ctx, volumeGroupID, createParams
func (_m *Client) CreateVolumeGroupSnapshot(ctx context.Context, volumeGroupID string, createParams *gopowerstore.VolumeGroupSnapshotCreate) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, volumeGroupID, createParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolumeGroupSnapshot")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.VolumeGroupSnapshotCreate) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, volumeGroupID, createParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.VolumeGroupSnapshotCreate) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, volumeGroupID, createParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.VolumeGroupSnapshotCreate) error); ok {
		r1 = rf(ctx, volumeGroupID, createParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFS provides a mock function with given fields: ctx, id
func (_m *Client) DeleteFS(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFS")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFsSnapshot provides a mock function with given fields: ctx, id
func (_m *Client) DeleteFsSnapshot(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFsSnapshot")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHost provides a mock function with given fields: ctx, deleteParams, id
func (_m *Client) DeleteHost(ctx context.Context, deleteParams *gopowerstore.HostDelete, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, deleteParams, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHost")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostDelete, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, deleteParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostDelete, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, deleteParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.HostDelete, string) error); ok {
		r1 = rf(ctx, deleteParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostGroup provides a mock function with given fields: ctx, id
func (_m *Client) DeleteHostGroup(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHostGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNAS provides a mock function with given fields: ctx, id
func (_m *Client) DeleteNAS(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNAS")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNFSExport provides a mock function with given fields: ctx, id
func (_m *Client) DeleteNFSExport(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNFSExport")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectionPolicy provides a mock function with given fields: ctx, id
func (_m *Client) DeleteProtectionPolicy(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtectionPolicy")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationRule provides a mock function with given fields: ctx, id
func (_m *Client) DeleteReplicationRule(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationRule")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: ctx, deleteParams, id
func (_m *Client) DeleteSnapshot(ctx context.Context, deleteParams *gopowerstore.VolumeDelete, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, deleteParams, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeDelete, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, deleteParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeDelete, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, deleteParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeDelete, string) error); ok {
		r1 = rf(ctx, deleteParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshotRule provides a mock function with given fields: ctx, deleteParams, id
func (_m *Client) DeleteSnapshotRule(ctx context.Context, deleteParams *gopowerstore.SnapshotRuleDelete, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, deleteParams, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshotRule")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleDelete, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, deleteParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleDelete, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, deleteParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.SnapshotRuleDelete, string) error); ok {
		r1 = rf(ctx, deleteParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageContainer provides a mock function with given fields: ctx, id
func (_m *Client) DeleteStorageContainer(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStorageContainer")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: ctx, deleteParams, id
func (_m *Client) DeleteVolume(ctx context.Context, deleteParams *gopowerstore.VolumeDelete, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, deleteParams, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeDelete, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, deleteParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeDelete, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, deleteParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeDelete, string) error); ok {
		r1 = rf(ctx, deleteParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolumeGroup provides a mock function with given fields: ctx, id
func (_m *Client) DeleteVolumeGroup(ctx context.Context, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolumeGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolumeFromHost provides a mock function with given fields: ctx, hostID, detachParams
func (_m *Client) DetachVolumeFromHost(ctx context.Context, hostID string, detachParams *gopowerstore.HostVolumeDetach) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, hostID, detachParams)

	if len(ret) == 0 {
		panic("no return value specified for DetachVolumeFromHost")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeDetach) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, hostID, detachParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeDetach) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, hostID, detachParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.HostVolumeDetach) error); ok {
		r1 = rf(ctx, hostID, detachParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolumeFromHostGroup provides a mock function with given fields: ctx, hostGroupID, detachParams
func (_m *Client) DetachVolumeFromHostGroup(ctx context.Context, hostGroupID string, detachParams *gopowerstore.HostVolumeDetach) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, hostGroupID, detachParams)

	if len(ret) == 0 {
		panic("no return value specified for DetachVolumeFromHostGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeDetach) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, hostGroupID, detachParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.HostVolumeDetach) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, hostGroupID, detachParams)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.HostVolumeDetach) error); ok {
		r1 = rf(ctx, hostGroupID, detachParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteActionOnReplicationSession provides a mock function with given fields: ctx, id, actionType, params
func (_m *Client) ExecuteActionOnReplicationSession(ctx context.Context, id string, actionType gopowerstore.ActionType, params *gopowerstore.FailoverParams) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id, actionType, params)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteActionOnReplicationSession")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.ActionType, *gopowerstore.FailoverParams) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id, actionType, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.ActionType, *gopowerstore.FailoverParams) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id, actionType, params)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.ActionType, *gopowerstore.FailoverParams) error); ok {
		r1 = rf(ctx, id, actionType, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRemoteSystems provides a mock function with given fields: ctx
func (_m *Client) GetAllRemoteSystems(ctx context.Context) ([]gopowerstore.RemoteSystem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRemoteSystems")
	}

	var r0 []gopowerstore.RemoteSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.RemoteSystem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.RemoteSystem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.RemoteSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppliance provides a mock function with given fields: ctx, id
func (_m *Client) GetAppliance(ctx context.Context, id string) (gopowerstore.ApplianceInstance, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAppliance")
	}

	var r0 gopowerstore.ApplianceInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ApplianceInstance, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ApplianceInstance); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.ApplianceInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplianceByName provides a mock function with given fields: ctx, name
func (_m *Client) GetApplianceByName(ctx context.Context, name string) (gopowerstore.ApplianceInstance, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetApplianceByName")
	}

	var r0 gopowerstore.ApplianceInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ApplianceInstance, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ApplianceInstance); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.ApplianceInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacity provides a mock function with given fields: ctx
func (_m *Client) GetCapacity(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacity")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: ctx
func (_m *Client) GetCluster(ctx context.Context) (gopowerstore.Cluster, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 gopowerstore.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (gopowerstore.Cluster, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) gopowerstore.Cluster); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(gopowerstore.Cluster)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomHTTPHeaders provides a mock function with given fields:
func (_m *Client) GetCustomHTTPHeaders() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCustomHTTPHeaders")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// GetFCPort provides a mock function with given fields: ctx, id
func (_m *Client) GetFCPort(ctx context.Context, id string) (gopowerstore.FcPort, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFCPort")
	}

	var r0 gopowerstore.FcPort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.FcPort, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.FcPort); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.FcPort)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFCPorts provides a mock function with given fields: ctx
func (_m *Client) GetFCPorts(ctx context.Context) ([]gopowerstore.FcPort, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFCPorts")
	}

	var r0 []gopowerstore.FcPort
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.FcPort, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.FcPort); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.FcPort)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFS provides a mock function with given fields: ctx, id
func (_m *Client) GetFS(ctx context.Context, id string) (gopowerstore.FileSystem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFS")
	}

	var r0 gopowerstore.FileSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.FileSystem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.FileSystem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.FileSystem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFSByName provides a mock function with given fields: ctx, name
func (_m *Client) GetFSByName(ctx context.Context, name string) (gopowerstore.FileSystem, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetFSByName")
	}

	var r0 gopowerstore.FileSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.FileSystem, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.FileSystem); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.FileSystem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileInterface provides a mock function with given fields: ctx, id
func (_m *Client) GetFileInterface(ctx context.Context, id string) (gopowerstore.FileInterface, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInterface")
	}

	var r0 gopowerstore.FileInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.FileInterface, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.FileInterface); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.FileInterface)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFsSnapshot provides a mock function with given fields: ctx, snapID
func (_m *Client) GetFsSnapshot(ctx context.Context, snapID string) (gopowerstore.FileSystem, error) {
	ret := _m.Called(ctx, snapID)

	if len(ret) == 0 {
		panic("no return value specified for GetFsSnapshot")
	}

	var r0 gopowerstore.FileSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.FileSystem, error)); ok {
		return rf(ctx, snapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.FileSystem); ok {
		r0 = rf(ctx, snapID)
	} else {
		r0 = ret.Get(0).(gopowerstore.FileSystem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFsSnapshots provides a mock function with given fields: ctx
func (_m *Client) GetFsSnapshots(ctx context.Context) ([]gopowerstore.FileSystem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFsSnapshots")
	}

	var r0 []gopowerstore.FileSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.FileSystem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.FileSystem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.FileSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFsSnapshotsByVolumeID provides a mock function with given fields: ctx, volID
func (_m *Client) GetFsSnapshotsByVolumeID(ctx context.Context, volID string) ([]gopowerstore.FileSystem, error) {
	ret := _m.Called(ctx, volID)

	if len(ret) == 0 {
		panic("no return value specified for GetFsSnapshotsByVolumeID")
	}

	var r0 []gopowerstore.FileSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]gopowerstore.FileSystem, error)); ok {
		return rf(ctx, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []gopowerstore.FileSystem); ok {
		r0 = rf(ctx, volID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.FileSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields: ctx, id
func (_m *Client) GetHost(ctx context.Context, id string) (gopowerstore.Host, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 gopowerstore.Host
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Host, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Host); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.Host)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostByName provides a mock function with given fields: ctx, name
func (_m *Client) GetHostByName(ctx context.Context, name string) (gopowerstore.Host, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetHostByName")
	}

	var r0 gopowerstore.Host
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Host, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Host); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.Host)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostGroup provides a mock function with given fields: ctx, id
func (_m *Client) GetHostGroup(ctx context.Context, id string) (gopowerstore.HostGroup, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetHostGroup")
	}

	var r0 gopowerstore.HostGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.HostGroup, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.HostGroup); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.HostGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostGroupByName provides a mock function with given fields: ctx, name
func (_m *Client) GetHostGroupByName(ctx context.Context, name string) (gopowerstore.HostGroup, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetHostGroupByName")
	}

	var r0 gopowerstore.HostGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.HostGroup, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.HostGroup); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.HostGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostGroups provides a mock function with given fields: ctx
func (_m *Client) GetHostGroups(ctx context.Context) ([]gopowerstore.HostGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHostGroups")
	}

	var r0 []gopowerstore.HostGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.HostGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.HostGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.HostGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostVolumeMapping provides a mock function with given fields: ctx, id
func (_m *Client) GetHostVolumeMapping(ctx context.Context, id string) (gopowerstore.HostVolumeMapping, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetHostVolumeMapping")
	}

	var r0 gopowerstore.HostVolumeMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.HostVolumeMapping, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.HostVolumeMapping); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.HostVolumeMapping)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostVolumeMappingByVolumeID provides a mock function with given fields: ctx, volumeID
func (_m *Client) GetHostVolumeMappingByVolumeID(ctx context.Context, volumeID string) ([]gopowerstore.HostVolumeMapping, error) {
	ret := _m.Called(ctx, volumeID)

	if len(ret) == 0 {
		panic("no return value specified for GetHostVolumeMappingByVolumeID")
	}

	var r0 []gopowerstore.HostVolumeMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]gopowerstore.HostVolumeMapping, error)); ok {
		return rf(ctx, volumeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []gopowerstore.HostVolumeMapping); ok {
		r0 = rf(ctx, volumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.HostVolumeMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostVolumeMappings provides a mock function with given fields: ctx
func (_m *Client) GetHostVolumeMappings(ctx context.Context) ([]gopowerstore.HostVolumeMapping, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHostVolumeMappings")
	}

	var r0 []gopowerstore.HostVolumeMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.HostVolumeMapping, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.HostVolumeMapping); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.HostVolumeMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHosts provides a mock function with given fields: ctx
func (_m *Client) GetHosts(ctx context.Context) ([]gopowerstore.Host, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHosts")
	}

	var r0 []gopowerstore.Host
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.Host, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.Host); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.Host)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxVolumeSize provides a mock function with given fields: ctx
func (_m *Client) GetMaxVolumeSize(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxVolumeSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNAS provides a mock function with given fields: ctx, id
func (_m *Client) GetNAS(ctx context.Context, id string) (gopowerstore.NAS, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNAS")
	}

	var r0 gopowerstore.NAS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.NAS, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.NAS); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.NAS)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNASByName provides a mock function with given fields: ctx, name
func (_m *Client) GetNASByName(ctx context.Context, name string) (gopowerstore.NAS, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNASByName")
	}

	var r0 gopowerstore.NAS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.NAS, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.NAS); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.NAS)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNFSExportByFileSystemID provides a mock function with given fields: ctx, fsID
func (_m *Client) GetNFSExportByFileSystemID(ctx context.Context, fsID string) (gopowerstore.NFSExport, error) {
	ret := _m.Called(ctx, fsID)

	if len(ret) == 0 {
		panic("no return value specified for GetNFSExportByFileSystemID")
	}

	var r0 gopowerstore.NFSExport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.NFSExport, error)); ok {
		return rf(ctx, fsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.NFSExport); ok {
		r0 = rf(ctx, fsID)
	} else {
		r0 = ret.Get(0).(gopowerstore.NFSExport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNFSExportByName provides a mock function with given fields: ctx, name
func (_m *Client) GetNFSExportByName(ctx context.Context, name string) (gopowerstore.NFSExport, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNFSExportByName")
	}

	var r0 gopowerstore.NFSExport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.NFSExport, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.NFSExport); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.NFSExport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNfsServer provides a mock function with given fields: ctx, id
func (_m *Client) GetNfsServer(ctx context.Context, id string) (gopowerstore.NFSServerInstance, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNfsServer")
	}

	var r0 gopowerstore.NFSServerInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.NFSServerInstance, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.NFSServerInstance); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.NFSServerInstance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectionPolicies provides a mock function with given fields: ctx
func (_m *Client) GetProtectionPolicies(ctx context.Context) ([]gopowerstore.ProtectionPolicy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectionPolicies")
	}

	var r0 []gopowerstore.ProtectionPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.ProtectionPolicy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.ProtectionPolicy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.ProtectionPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectionPolicy provides a mock function with given fields: ctx, id
func (_m *Client) GetProtectionPolicy(ctx context.Context, id string) (gopowerstore.ProtectionPolicy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectionPolicy")
	}

	var r0 gopowerstore.ProtectionPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ProtectionPolicy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ProtectionPolicy); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.ProtectionPolicy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectionPolicyByName provides a mock function with given fields: ctx, name
func (_m *Client) GetProtectionPolicyByName(ctx context.Context, name string) (gopowerstore.ProtectionPolicy, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectionPolicyByName")
	}

	var r0 gopowerstore.ProtectionPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ProtectionPolicy, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ProtectionPolicy); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.ProtectionPolicy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteSystem provides a mock function with given fields: ctx, id
func (_m *Client) GetRemoteSystem(ctx context.Context, id string) (gopowerstore.RemoteSystem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteSystem")
	}

	var r0 gopowerstore.RemoteSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.RemoteSystem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.RemoteSystem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.RemoteSystem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteSystemByName provides a mock function with given fields: ctx, name
func (_m *Client) GetRemoteSystemByName(ctx context.Context, name string) (gopowerstore.RemoteSystem, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteSystemByName")
	}

	var r0 gopowerstore.RemoteSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.RemoteSystem, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.RemoteSystem); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.RemoteSystem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationRule provides a mock function with given fields: ctx, id
func (_m *Client) GetReplicationRule(ctx context.Context, id string) (gopowerstore.ReplicationRule, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationRule")
	}

	var r0 gopowerstore.ReplicationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ReplicationRule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ReplicationRule); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.ReplicationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationRuleByName provides a mock function with given fields: ctx, name
func (_m *Client) GetReplicationRuleByName(ctx context.Context, name string) (gopowerstore.ReplicationRule, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationRuleByName")
	}

	var r0 gopowerstore.ReplicationRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ReplicationRule, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ReplicationRule); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.ReplicationRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSessionByID provides a mock function with given fields: ctx, id
func (_m *Client) GetReplicationSessionByID(ctx context.Context, id string) (gopowerstore.ReplicationSession, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSessionByID")
	}

	var r0 gopowerstore.ReplicationSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ReplicationSession, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ReplicationSession); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.ReplicationSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSessionByLocalResourceID provides a mock function with given fields: ctx, id
func (_m *Client) GetReplicationSessionByLocalResourceID(ctx context.Context, id string) (gopowerstore.ReplicationSession, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSessionByLocalResourceID")
	}

	var r0 gopowerstore.ReplicationSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.ReplicationSession, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.ReplicationSession); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.ReplicationSession)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: ctx, snapID
func (_m *Client) GetSnapshot(ctx context.Context, snapID string) (gopowerstore.Volume, error) {
	ret := _m.Called(ctx, snapID)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Volume, error)); ok {
		return rf(ctx, snapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Volume); ok {
		r0 = rf(ctx, snapID)
	} else {
		r0 = ret.Get(0).(gopowerstore.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotByName provides a mock function with given fields: ctx, snapName
func (_m *Client) GetSnapshotByName(ctx context.Context, snapName string) (gopowerstore.Volume, error) {
	ret := _m.Called(ctx, snapName)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotByName")
	}

	var r0 gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Volume, error)); ok {
		return rf(ctx, snapName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Volume); ok {
		r0 = rf(ctx, snapName)
	} else {
		r0 = ret.Get(0).(gopowerstore.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotRule provides a mock function with given fields: ctx, id
func (_m *Client) GetSnapshotRule(ctx context.Context, id string) (gopowerstore.SnapshotRule, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotRule")
	}

	var r0 gopowerstore.SnapshotRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.SnapshotRule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.SnapshotRule); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.SnapshotRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotRuleByName provides a mock function with given fields: ctx, name
func (_m *Client) GetSnapshotRuleByName(ctx context.Context, name string) (gopowerstore.SnapshotRule, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotRuleByName")
	}

	var r0 gopowerstore.SnapshotRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.SnapshotRule, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.SnapshotRule); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.SnapshotRule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotRules provides a mock function with given fields: ctx
func (_m *Client) GetSnapshotRules(ctx context.Context) ([]gopowerstore.SnapshotRule, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotRules")
	}

	var r0 []gopowerstore.SnapshotRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.SnapshotRule, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.SnapshotRule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SnapshotRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshots provides a mock function with given fields: ctx
func (_m *Client) GetSnapshots(ctx context.Context) ([]gopowerstore.Volume, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshots")
	}

	var r0 []gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.Volume, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.Volume); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotsByVolumeID provides a mock function with given fields: ctx, volID
func (_m *Client) GetSnapshotsByVolumeID(ctx context.Context, volID string) ([]gopowerstore.Volume, error) {
	ret := _m.Called(ctx, volID)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotsByVolumeID")
	}

	var r0 []gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]gopowerstore.Volume, error)); ok {
		return rf(ctx, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []gopowerstore.Volume); ok {
		r0 = rf(ctx, volID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSoftwareInstalled provides a mock function with given fields: ctx
func (_m *Client) GetSoftwareInstalled(ctx context.Context) ([]gopowerstore.SoftwareInstalled, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSoftwareInstalled")
	}

	var r0 []gopowerstore.SoftwareInstalled
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.SoftwareInstalled, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.SoftwareInstalled); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SoftwareInstalled)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSoftwareMajorMinorVersion provides a mock function with given fields: ctx
func (_m *Client) GetSoftwareMajorMinorVersion(ctx context.Context) (float32, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSoftwareMajorMinorVersion")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float32, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float32); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageContainer provides a mock function with given fields: ctx, id
func (_m *Client) GetStorageContainer(ctx context.Context, id string) (gopowerstore.StorageContainer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageContainer")
	}

	var r0 gopowerstore.StorageContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.StorageContainer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.StorageContainer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.StorageContainer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageISCSITargetAddresses provides a mock function with given fields: ctx
func (_m *Client) GetStorageISCSITargetAddresses(ctx context.Context) ([]gopowerstore.IPPoolAddress, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageISCSITargetAddresses")
	}

	var r0 []gopowerstore.IPPoolAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.IPPoolAddress, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.IPPoolAddress); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.IPPoolAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: ctx, id
func (_m *Client) GetVolume(ctx context.Context, id string) (gopowerstore.Volume, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVolume")
	}

	var r0 gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Volume, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Volume); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeByName provides a mock function with given fields: ctx, name
func (_m *Client) GetVolumeByName(ctx context.Context, name string) (gopowerstore.Volume, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeByName")
	}

	var r0 gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.Volume, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.Volume); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroup provides a mock function with given fields: ctx, id
func (_m *Client) GetVolumeGroup(ctx context.Context, id string) (gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroup")
	}

	var r0 gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupByName provides a mock function with given fields: ctx, name
func (_m *Client) GetVolumeGroupByName(ctx context.Context, name string) (gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupByName")
	}

	var r0 gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupSnapshot provides a mock function with given fields: ctx, snapID
func (_m *Client) GetVolumeGroupSnapshot(ctx context.Context, snapID string) (gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx, snapID)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupSnapshot")
	}

	var r0 gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx, snapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx, snapID)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupSnapshotByName provides a mock function with given fields: ctx, snapName
func (_m *Client) GetVolumeGroupSnapshotByName(ctx context.Context, snapName string) (gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx, snapName)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupSnapshotByName")
	}

	var r0 gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx, snapName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx, snapName)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, snapName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupSnapshots provides a mock function with given fields: ctx
func (_m *Client) GetVolumeGroupSnapshots(ctx context.Context) ([]gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupSnapshots")
	}

	var r0 []gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.VolumeGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroups provides a mock function with given fields: ctx
func (_m *Client) GetVolumeGroups(ctx context.Context) ([]gopowerstore.VolumeGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroups")
	}

	var r0 []gopowerstore.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.VolumeGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.VolumeGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.VolumeGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeGroupsByVolumeID provides a mock function with given fields: ctx, id
func (_m *Client) GetVolumeGroupsByVolumeID(ctx context.Context, id string) (gopowerstore.VolumeGroups, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumeGroupsByVolumeID")
	}

	var r0 gopowerstore.VolumeGroups
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gopowerstore.VolumeGroups, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gopowerstore.VolumeGroups); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.VolumeGroups)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumes provides a mock function with given fields: ctx
func (_m *Client) GetVolumes(ctx context.Context) ([]gopowerstore.Volume, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumes")
	}

	var r0 []gopowerstore.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]gopowerstore.Volume, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []gopowerstore.Volume); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFS provides a mock function with given fields: ctx, modifyParams, volID
func (_m *Client) ModifyFS(ctx context.Context, modifyParams *gopowerstore.FSModify, volID string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, volID)

	if len(ret) == 0 {
		panic("no return value specified for ModifyFS")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FSModify, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.FSModify, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, volID)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.FSModify, string) error); ok {
		r1 = rf(ctx, modifyParams, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyHost provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyHost(ctx context.Context, modifyParams *gopowerstore.HostModify, id string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyHost")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostModify, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostModify, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.HostModify, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyHostGroup provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyHostGroup(ctx context.Context, modifyParams *gopowerstore.HostGroupModify, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyHostGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostGroupModify, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.HostGroupModify, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.HostGroupModify, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyNFSExport provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyNFSExport(ctx context.Context, modifyParams *gopowerstore.NFSExportModify, id string) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyNFSExport")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSExportModify, string) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.NFSExportModify, string) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.NFSExportModify, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyProtectionPolicy provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyProtectionPolicy(ctx context.Context, modifyParams *gopowerstore.ProtectionPolicyCreate, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyProtectionPolicy")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ProtectionPolicyCreate, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.ProtectionPolicyCreate, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.ProtectionPolicyCreate, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySnapshotRule provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifySnapshotRule(ctx context.Context, modifyParams *gopowerstore.SnapshotRuleCreate, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifySnapshotRule")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleCreate, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.SnapshotRuleCreate, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.SnapshotRuleCreate, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyStorageContainer provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyStorageContainer(ctx context.Context, modifyParams *gopowerstore.StorageContainer, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyStorageContainer")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.StorageContainer, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.StorageContainer, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.StorageContainer, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolume provides a mock function with given fields: ctx, modifyParams, volID
func (_m *Client) ModifyVolume(ctx context.Context, modifyParams *gopowerstore.VolumeModify, volID string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, volID)

	if len(ret) == 0 {
		panic("no return value specified for ModifyVolume")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeModify, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, volID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeModify, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, volID)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeModify, string) error); ok {
		r1 = rf(ctx, modifyParams, volID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolumeGroup provides a mock function with given fields: ctx, modifyParams, id
func (_m *Client) ModifyVolumeGroup(ctx context.Context, modifyParams *gopowerstore.VolumeGroupModify, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, modifyParams, id)

	if len(ret) == 0 {
		panic("no return value specified for ModifyVolumeGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupModify, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, modifyParams, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupModify, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, modifyParams, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeGroupModify, string) error); ok {
		r1 = rf(ctx, modifyParams, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByAppliance provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByAppliance(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByApplianceResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByAppliance")
	}

	var r0 []gopowerstore.PerformanceMetricsByApplianceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByApplianceResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByApplianceResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByApplianceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByCluster provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByCluster(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByClusterResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByCluster")
	}

	var r0 []gopowerstore.PerformanceMetricsByClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByClusterResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByClusterResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByFeEthNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByFeEthNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeEthNodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByFeEthNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByFeEthNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeEthNodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByFeEthNodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByFeEthNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByFeEthPort provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByFeEthPort(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeEthPortResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByFeEthPort")
	}

	var r0 []gopowerstore.PerformanceMetricsByFeEthPortResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeEthPortResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByFeEthPortResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByFeEthPortResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByFeFcNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByFeFcNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeFcNodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByFeFcNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByFeFcNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeFcNodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByFeFcNodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByFeFcNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByFeFcPort provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByFeFcPort(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeFcPortResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByFeFcPort")
	}

	var r0 []gopowerstore.PerformanceMetricsByFeFcPortResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFeFcPortResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByFeFcPortResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByFeFcPortResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByFileSystem provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByFileSystem(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFileSystemResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByFileSystem")
	}

	var r0 []gopowerstore.PerformanceMetricsByFileSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByFileSystemResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByFileSystemResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByFileSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByNodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByVM provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByVM(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVMResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByVM")
	}

	var r0 []gopowerstore.PerformanceMetricsByVMResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVMResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByVMResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByVMResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByVg provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByVg(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVgResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByVg")
	}

	var r0 []gopowerstore.PerformanceMetricsByVgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVgResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByVgResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByVgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsByVolume provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsByVolume(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVolumeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsByVolume")
	}

	var r0 []gopowerstore.PerformanceMetricsByVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByVolumeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByVolumeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsNfsByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsNfsByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsNfsByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByNfsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByNfsResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByNfsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsNfsv3ByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsNfsv3ByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsv3Response, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsNfsv3ByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByNfsv3Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsv3Response, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByNfsv3Response); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByNfsv3Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsNfsv4ByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsNfsv4ByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsv4Response, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsNfsv4ByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsByNfsv4Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsByNfsv4Response, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsByNfsv4Response); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsByNfsv4Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmb1BuiltinclientByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmb1BuiltinclientByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV1BuiltinClientResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmb1BuiltinclientByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbV1BuiltinClientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV1BuiltinClientResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbV1BuiltinClientResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbV1BuiltinClientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmb1ByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmb1ByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV1NodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmb1ByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbV1NodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV1NodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbV1NodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbV1NodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmb2BuiltinclientByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmb2BuiltinclientByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV2BuiltinClientResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmb2BuiltinclientByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbV2BuiltinClientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV2BuiltinClientResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbV2BuiltinClientResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbV2BuiltinClientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmb2ByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmb2ByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV2NodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmb2ByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbV2NodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbV2NodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbV2NodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbV2NodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmbBranchCacheByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmbBranchCacheByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbCacheResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmbBranchCacheByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbCacheResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbCacheResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbCacheResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbCacheResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmbBuiltinclientByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmbBuiltinclientByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbClientResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmbBuiltinclientByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbClientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbClientResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbClientResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbClientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformanceMetricsSmbByNode provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) PerformanceMetricsSmbByNode(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbNodeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for PerformanceMetricsSmbByNode")
	}

	var r0 []gopowerstore.PerformanceMetricsBySmbNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.PerformanceMetricsBySmbNodeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.PerformanceMetricsBySmbNodeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.PerformanceMetricsBySmbNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterK8sCluster provides a mock function with given fields: ctx, request
func (_m *Client) RegisterK8sCluster(ctx context.Context, request *gopowerstore.K8sCluster) (gopowerstore.CreateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RegisterK8sCluster")
	}

	var r0 gopowerstore.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.K8sCluster) (gopowerstore.CreateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.K8sCluster) gopowerstore.CreateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(gopowerstore.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.K8sCluster) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMembersFromVolumeGroup provides a mock function with given fields: ctx, params, id
func (_m *Client) RemoveMembersFromVolumeGroup(ctx context.Context, params *gopowerstore.VolumeGroupMembers, id string) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, params, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMembersFromVolumeGroup")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, params, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, params, id)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gopowerstore.VolumeGroupMembers, string) error); ok {
		r1 = rf(ctx, params, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCustomHTTPHeaders provides a mock function with given fields: headers
func (_m *Client) SetCustomHTTPHeaders(headers http.Header) {
	_m.Called(headers)
}

// SetLogger provides a mock function with given fields: logger
func (_m *Client) SetLogger(logger gopowerstore.Logger) {
	_m.Called(logger)
}

// SetTraceID provides a mock function with given fields: ctx, value
func (_m *Client) SetTraceID(ctx context.Context, value string) context.Context {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for SetTraceID")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// SpaceMetricsByAppliance provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByAppliance(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByApplianceResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByAppliance")
	}

	var r0 []gopowerstore.SpaceMetricsByApplianceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByApplianceResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByApplianceResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByApplianceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByCluster provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByCluster(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByClusterResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByCluster")
	}

	var r0 []gopowerstore.SpaceMetricsByClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByClusterResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByClusterResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByStorageContainer provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByStorageContainer(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByStorageContainerResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByStorageContainer")
	}

	var r0 []gopowerstore.SpaceMetricsByStorageContainerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByStorageContainerResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByStorageContainerResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByStorageContainerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByVM provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByVM(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVMResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByVM")
	}

	var r0 []gopowerstore.SpaceMetricsByVMResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVMResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByVMResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByVMResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByVolume provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByVolume(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByVolume")
	}

	var r0 []gopowerstore.SpaceMetricsByVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByVolumeResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByVolumeFamily provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByVolumeFamily(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeFamilyResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByVolumeFamily")
	}

	var r0 []gopowerstore.SpaceMetricsByVolumeFamilyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeFamilyResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByVolumeFamilyResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByVolumeFamilyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpaceMetricsByVolumeGroup provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) SpaceMetricsByVolumeGroup(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeGroupResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for SpaceMetricsByVolumeGroup")
	}

	var r0 []gopowerstore.SpaceMetricsByVolumeGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.SpaceMetricsByVolumeGroupResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.SpaceMetricsByVolumeGroupResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.SpaceMetricsByVolumeGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolumeGroupProtectionPolicy provides a mock function with given fields: ctx, id, params
func (_m *Client) UpdateVolumeGroupProtectionPolicy(ctx context.Context, id string, params *gopowerstore.VolumeGroupChangePolicy) (gopowerstore.EmptyResponse, error) {
	ret := _m.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVolumeGroupProtectionPolicy")
	}

	var r0 gopowerstore.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.VolumeGroupChangePolicy) (gopowerstore.EmptyResponse, error)); ok {
		return rf(ctx, id, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gopowerstore.VolumeGroupChangePolicy) gopowerstore.EmptyResponse); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Get(0).(gopowerstore.EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gopowerstore.VolumeGroupChangePolicy) error); ok {
		r1 = rf(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WearMetricsByDrive provides a mock function with given fields: ctx, entityID, interval
func (_m *Client) WearMetricsByDrive(ctx context.Context, entityID string, interval gopowerstore.MetricsIntervalEnum) ([]gopowerstore.WearMetricsByDriveResponse, error) {
	ret := _m.Called(ctx, entityID, interval)

	if len(ret) == 0 {
		panic("no return value specified for WearMetricsByDrive")
	}

	var r0 []gopowerstore.WearMetricsByDriveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) ([]gopowerstore.WearMetricsByDriveResponse, error)); ok {
		return rf(ctx, entityID, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) []gopowerstore.WearMetricsByDriveResponse); ok {
		r0 = rf(ctx, entityID, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gopowerstore.WearMetricsByDriveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gopowerstore.MetricsIntervalEnum) error); ok {
		r1 = rf(ctx, entityID, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
